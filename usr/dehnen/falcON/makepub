# -*- makefile -*-
################################################################################
#
# make/public for the falcON N-body project
#
################################################################################

# -----------
# directories
# -----------

IPUB			:= $(INC)public/
IPRO			:= $(INC)proper/
IPAR			:= $(INC)parallel/
IACC			:= $(INC)acc/
SLIB			:= $(SRC)public/lib/
SEXE			:= $(SRC)public/exe/
SMAN			:= $(SRC)public/manip/
SACC			:= $(SRC)public/acc/

makefiles		:= Makefile makedefs makepub

# ------------
# from WDutils
# ------------

Pi_h			:= $(IUTI)Pi.h
timer_h			:= $(IUTI)timer.h
inline_h		:= $(IUTI)inline.h
exception_h		:= $(IUTI)exception.h
meta_h			:= $(IUTI)meta.h $(exception_h)
traits_h		:= $(IUTI)traits.h $(exception_h)
io_h			:= $(IUTI)io.h $(exception_h) $(traits_h)
tupel_h			:= $(IUTI)vector.h $(IUTI)tupel.h $(IUTI)tupel.cc
memory_h		:= $(IUTI)memory.h $(traits_h) $(inline_h)
radix_h			:= $(IUTI)radix.h $(traits_h) $(memory_h)
sse_h			:= $(IUTI)sse.h $(exception_h) $(meta_h) $(memory_h)
heap_h			:= $(IUTI)heap.h $(memory_h)
numerics_h		:= $(IUTI)numerics.h $(inline_h) $(memory_h) $(tupel_h)
spline_h		:= $(IUTI)spline.h $(numerics_h) $(memory_h)
random_h_util		:= $(IUTI)random.h $(inline_h) $(Pi_h) $(traits_h)
WDMath_h		:= $(IUTI)WDMath.h $(Pi_h) $(exception_h) $(traits_h) \
				$(inline_h) $(meta_h)
geometry_h		:= $(IUTI)geometry.h $(sse_h) $(tupel_h) \
				$(IUTI)geometry_inl.h
periodic_h		:= $(IUTI)periodic.h $(geometry_h)
octtree_h		:= $(IUTI)octtree.h $(periodic_h) $(memory_h) $(io_h)
matr33_h		:= $(IUTI)matr33.h $(exception_h) $(inline_h)

# -----------------------
# header dependency lists
# -----------------------

utils_h			:= $(traits_h) $(Pi_h) $(inline_h) $(io_h) $(tupel_h) \
				$(exception_h) $(meta_h) $(memory_h)
types_h			:= $(IPUB)types.h $(utils_h) $(tensor_h)
basic_h			:= $(IPUB)basic.h $(types_h)
simd_h			:= $(IPUB)simd.h $(basic_h)
PotExp_h		:= $(IPUB)PotExp.h $(basic_h) $(mpi_falcON_h)
tensor_h		:= $(IPUB)tensor.h $(utils_h) $(IPUB)tensor.cc
tensor_set_h		:= $(IPUB)tensor_set.h $(tensor_h) $(simd_h) \
				$(IPUB)tensor_set.cc
default_h		:= $(IPUB)default.h $(basic_h)
interact_h		:= $(IPUB)interact.h $(basic_h)
fields_h		:= $(IPUB)fields.h $(basic_h)
ifdef DPROPER
gravity_ind_cc		:= $(IPRO)gravity_ind.cc
gravity_pro		:= $(gravity_ind_cc)
kernel_SSE_h		:= $(IPRO)kernel_SSE.h
endif
body_h			:= $(INC)body.h $(fields_h)
externacc_h		:= $(INC)externacc.h $(body_h)
tree_h			:= $(IPUB)tree.h $(default_h) $(body_h)
partner_h		:= $(IPUB)partner.h $(tree_h)
gravity_h		:= $(IPUB)gravity.h $(tree_h) $(tensor_set_h)
kernel_h		:= $(IPUB)kernel.h $(gravity_h) $(simd_h)
forces_h		:= $(INC)forces.h $(types_h) $(default_h) $(body_h) \
				$(IPUB)forces.cc $(gravity_h) $(partner_h) \
				$(sph_h)
forces_C_h		:= $(INC)forces_C.h
forces_f		:= $(INC)forces.f
nemopp_h		:= $(IPUB)nemo++.h $(fields_h)
main_h			:= $(INC)main.h $(nemopp_h) $(body_h) $(mpi_falcON_h)
nbody_h			:= $(IPUB)nbody.h $(body_h) $(nemopp_h) $(forces_h) \
				$(externacc_h)
manip_h			:= $(IPUB)manip.h $(body_h)
defman_h		:= $(IPUB)defman.h $(manip_h)
profile_h		:= $(IPUB)profile.h $(body_h)
tools_h			:= $(IPUB)tools.h $(body_h) $(tree_h)
random_h		:= $(IPUB)random.h $(basic_h) $(random_h_util)
sample_h		:= $(IPUB)sample.h $(body_h) $(random_h)
gamma_h			:= $(IPUB)gamma.h $(basic_h) $(sample_h) $(numerics_h)
king_h			:= $(IPUB)king.h $(basic_h)
bodyfunc_h		:= $(IPUB)bodyfunc.h $(body_h) 
bodyduncdefs_h		:= $(IPUB)bodyfuncdefs.h $(body_h) 
neighbours_h		:= $(IPUB)neighbours.h $(tree_h)
ifdef DPROPER
halo_h			:= $(IPUB)halo.h $(externacc_h) $(sample_h) \
				$(IPRO)achalo.h
else
halo_h			:= $(IPUB)halo.h $(externacc_h) $(sample_h)
endif
WD99disc_h		:= $(IPUB)WD99disc.h $(random_h) $(externacc_h)

timer_h			:= $(IACC)timer.h
center_h		:= $(IACC)center.h
ifdef NEMO
defacc_h		:= $(NEMOINC)/defacc.h
endif
GalPot_h		:= $(IACC)GalPot.cc $(IACC)GalPot.h \
				$(IACC)GalPot_pre.h $(tupel_h)

# -----------------------
# source dependency lists
# -----------------------

basic_cc		:= $(SLIB)basic.cc $(basic_h)
body_cc			:= $(SLIB)body.cc $(body_h) $(nemopp_h) $(numerics) \
				$(heap_h)
kernel_cc		:= $(SLIB)kernel.cc $(kernel_h) $(kernel_SSE_h)
partner_cc		:= $(SLIB)partner.cc $(partner_h) $(interact_h)
gravity_cc		:= $(SLIB)gravity.cc $(gravity_h) $(kernel_h) \
				$(interact_h) $(numerics_h) $(gravity_pro)
tree_cc			:= $(SLIB)tree.cc $(tree_h) $(body_h) $(memory_h)
nbody_cc		:= $(SLIB)nbody.cc $(nbody_h)
manip_cc		:= $(SLIB)manip.cc $(manip_h)
nemopp_cc		:= $(SLIB)nemo++.cc $(nemopp_h) $(basic_h) \
				$(NEMOINC)/stdinc.h $(NEMOINC)/loadobj.h \
				$(NEMOINC)/getparam.h $(NEMOINC)/history.h \
				$(NEMOINC)/filestruct.h \
				$(NEMOINC)/snapshot/snapshot.h
forcesC_cc		:= $(SLIB)forcesC.cc $(forces_C_h) $(forces_h)
tools_cc		:= $(SLIB)tools.cc $(tools_h) $(Pi_h) $(memory_h)
profile_cc		:= $(SLIB)profile.cc $(profile_h) $(Pi_h) $(numerics_h)
ifdef DPROPER
sample_cc		:= $(SLIB)sample.cc $(sample_h) $(basic_h) \
				$(numerics_h) $(IPRO)sample.cc
else
sample_cc		:= $(SLIB)sample.cc $(sample_h) $(basic_h) $(numerics_h)
endif
gamma_cc		:= $(SLIB)gamma.cc $(gamma_h) $(numerics_h)
king_cc			:= $(SLIB)king.cc $(king_h) $(numerics_h)
bodyfunc_cc		:= $(SLIB)bodyfunc.cc $(bodyfunc_h) $(bodyfuncdefs_h) 
neighbours_cc		:= $(SLIB)neighbours.cc $(neighbours_h)
ifdef DPROPER
halo_cc			:= $(SLIB)halo.cc $(halo_h) $(basic_h) $(spline_h) \
				$(WDMath_h) $(IPRO)achalo.cc
else
halo_cc			:= $(SLIB)halo.cc $(halo_h) $(basic_h) $(spline_h) \
				$(WDMath_h)
endif
WD99disc_cc		:= $(SLIB)WD99disc.cc $(WD99disc_h) $(numerics_h) \
				$(WDMath_h) $(spline_h)
PotExp_cc		:= $(SLIB)PotExp.cc $(PotExp_h) $(simd_h)

# ---------------
# library modules
# ---------------

$(LIB)basic.o:		$(basic_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
ifdef NEMO
$(LIB)nemo++.o:		$(nemopp_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(INEMO) $(NBDYFLAGS)
endif
$(LIB)body.o:		$(body_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)tree.o:		$(tree_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)gravity.o:	$(gravity_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)partner.o:	$(partner_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)halo.o:		$(halo_cc) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)WD99disc.o:	$(WD99disc_cc) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
ifdef NEMO
$(LIB)manip.o:		$(manip_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)bodyfunc.o:	$(bodyfunc_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS) -DCOMPILER='"$(CXX)"'
endif
$(LIB)neighbours.o:	$(neighbours_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)nbody.o:		$(nbody_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)forcesC.o:	$(forcesC_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
ifdef DSSE
$(LIB)kernel.o:		$(kernel_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NOSSE) $(NBDYFLAGS)
else
$(LIB)kernel.o:		$(kernel_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
endif
$(LIB)profile.o:	$(profile_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)tools.o:		$(tools_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)sample.o:		$(sample_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)gamma.o:		$(gamma_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)king.o:		$(king_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)
$(LIB)PotExp.o:		$(PotExp_cc) $(LIBT) $(makefiles)
			$(MAKE_OBJ) $(NBDYFLAGS)

ifdef NEMO
public_objs	 :=	$(LIB)basic.o $(LIB)nemo++.o $(LIB)body.o \
			$(LIB)tree.o $(LIB)gravity.o $(LIB)kernel.o \
			$(LIB)partner.o $(LIB)nbody.o $(LIB)forcesC.o \
			$(LIB)tools.o $(LIB)sample.o $(LIB)manip.o \
			$(LIB)profile.o $(LIB)bodyfunc.o $(LIB)neighbours.o \
			$(LIB)PotExp.o

else
public_objs	 :=	$(LIB)basic.o $(LIB)body.o $(LIB)tree.o \
			$(LIB)gravity.o $(LIB)kernel.o $(LIB)partner.o \
			$(LIB)nbody.o $(LIB)forcesC.o $(LIB)sample.o \
			$(LIB)neighbours.o $(LIB)PotExp.o
endif

ifdef NEMO

# ------------
# manipulators
# ------------

$(MAN)addgravity.so:		$(SMAN)addgravity.cc $(MANT) $(defman_h) $(forces_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)add_plummer.so:		$(SMAN)add_plummer.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)bound_centre.so:		$(SMAN)bound_centre.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)centre_of_mass.so:	$(SMAN)centre_of_mass.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)dens_centre.so:		$(SMAN)dens_centre.cc $(MANT) $(defman_h) $(tools_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)density.so:		$(SMAN)density.cc $(MANT) $(defman_h) $(neighbours_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)densprof.so:		$(SMAN)densprof.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)grow_mass.so:		$(SMAN)grow_mass.cc $(MANT) $(timer_h)  $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)lagrange.so:		$(SMAN)lagrange.cc $(MANT) $(defman_h) $(numerics_h) $(heap_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)projprof.so:		$(SMAN)projprof.cc $(MANT) $(defman_h) $(profile_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)randomize_azimuth.so:	$(SMAN)randomize_azimuth.cc $(MANT) $(defman_h) $(Pi_h) $(random_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)reduce_mass.so:		$(SMAN)reduce_mass.cc $(MANT) $(timer_h)  $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)report_bodies.so:		$(SMAN)report_bodies.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)set_centre.so:		$(SMAN)set_centre.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)set_filter.so:		$(SMAN)set_filter.cc $(MANT) $(defman_h) $(bodyfunc_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)set_subset.so:		$(SMAN)set_subset.cc $(MANT) $(defman_h) $(bodyfunc_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)shift_to_centre.so:	$(SMAN)shift_to_centre.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)sphereprof.so:		$(SMAN)sphereprof.cc $(MANT) $(defman_h) $(profile_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)symmetrize_pairs.so:	$(SMAN)symmetrize_pairs.cc $(MANT) $(defman_h) $(makefiles)
				$(MAKE_MANIP)
$(MAN)use_filter.so:		$(SMAN)use_filter.cc $(MANT) $(defman_h) $(bodyfunc_h) $(makefiles)
				$(MAKE_MANIP)

manip_pub		:=	$(MAN)addgravity.so \
				$(MAN)add_plummer.so \
				$(MAN)bound_centre.so \
				$(MAN)centre_of_mass.so \
				$(MAN)dens_centre.so \
				$(MAN)density.so \
				$(MAN)densprof.so \
				$(MAN)grow_mass.so \
				$(MAN)lagrange.so \
				$(MAN)projprof.so \
				$(MAN)randomize_azimuth.so \
				$(MAN)reduce_mass.so \
				$(MAN)report_bodies.so \
				$(MAN)set_centre.so \
				$(MAN)set_filter.so \
				$(MAN)set_subset.so \
				$(MAN)shift_to_centre.so \
				$(MAN)sphereprof.so \
				$(MAN)symmetrize_pairs.so \
				$(MAN)use_filter.so

# -------------
# accelerations
# -------------

$(ACC)Combined.so:		$(SACC)Combined.cc $(ACCT) $(timer_h) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)Dehnen.so:		$(SACC)Dehnen.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)DehnenMcLaughlin.so:	$(SACC)DehnenMcLaughlin.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)DiscPot.so:		$(SACC)DiscPot.cc $(ACCT) $(GalPot_h) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)GalPot.so:		$(SACC)GalPot.cc $(ACCT) $(GalPot_h) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)Halo.so:			$(SACC)Halo.cc $(ACCT) $(halo_cc) $(defacc_h) $(makefiles)
				$(MAKE_ACC) -I$(SRC) $(NBDYFLAGS)
$(ACC)LogPot.so:		$(SACC)LogPot.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)MiyamotoNagai.so:		$(SACC)MiyamotoNagai.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)Monopole.so:		$(SACC)Monopole.cc $(ACCT) $(timer_h) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)NFW.so:			$(SACC)NFW.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)Plummer.so:		$(SACC)Plummer.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)Point.so:			$(SACC)Point.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)PotExp.so:                $(SACC)PotExp.cc $(ACCT) $(PotExp_cc) $(defacc_h) $(makefiles)
				$(MAKE_ACC) -I$(SRC) $(NBDYFLAGS)
$(ACC)Shrink.so:		$(SACC)Shrink.cc $(ACCT) $(timer_h) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)SoftKernel.so:		$(SACC)SoftKernel.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC) $(NBDYFLAGS)
$(ACC)GasPotential.so:		$(SACC)GasPotential.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)
$(ACC)GPDehnen.so:		$(SACC)GPDehnen.cc $(ACCT) $(defacc_h) $(makefiles)
				$(MAKE_ACC)


acc_pub		:=		$(ACC)Combined.so \
				$(ACC)Dehnen.so \
				$(ACC)DehnenMcLaughlin.so \
				$(ACC)GalPot.so \
				$(ACC)DiscPot.so \
				$(ACC)Halo.so \
				$(ACC)MiyamotoNagai.so \
				$(ACC)Monopole.so \
				$(ACC)NFW.so \
				$(ACC)Plummer.so \
				$(ACC)Point.so \
				$(ACC)PotExp.so \
				$(ACC)Shrink.so \
				$(ACC)SoftKernel.so \
				$(ACC)LogPot.so
# see https://github.com/BS-astronomer/GasPotential.git
#				$(ACC)GasPotential.so \
#				$(ACC)GPDehnen.so

endif

# -----
# mains
# -----

$(BIN)TestGrav:		$(SEXE)TestGrav.cc $(BINT) $(main_h) $(body_h) $(forces_h) $(Pi_h) $(numerics_h) $(basic_h) $(makefiles)
			$(MAKE_EXE) $(NBDYFLAGS) $(LFALCON) -lm
$(BIN)TestGravC:	$(SEXE)TestGravC.c $(BINT) $(forces_C_h) $(makefiles)
			$(MAKE_EXE_C) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm
#$(BIN)TestGravF:	$(SEXE)TestGravF.F $(BINT) $(makefiles)
#			$(MAKE_EXE_F) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm
$(BIN)TestGravF:	$(SEXE)TestGrav.F90 $(BINT) $(makefiles)
			$(MAKE_EXE_F) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm
$(BIN)TestPair:		$(SEXE)TestPair.cc $(BINT) $(main_h) $(body_h) $(forces_h) $(makefiles)
			$(MAKE_EXE) $(NBDYFLAGS) $(LFALCON) -lm
$(BIN)TestPairC:	$(SEXE)TestPairC.c $(BINT) $(forces_C_h) $(makefiles)
			$(MAKE_EXE_C) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm
$(BIN)TestPairF:	$(SEXE)TestPairF.F $(BINT) $(makefiles)
			$(MAKE_EXE_F) $(NBDYFLAGS) $(LFALCON) -lstdc++ -lm

ifdef NEMO


$(BIN)a2s:		$(SEXE)a2s.cc $(BINT) $(main_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)addgravity:	$(SEXE)addgravity.cc $(BINT) $(main_h) $(externacc_h) $(forces_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
ifneq ($(COMPILER),icc)
$(BIN)addprop:		$(SEXE)addprop.cc $(LIBT) $(main_h) $(bodyfunc_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
endif
$(BIN)density:		$(SEXE)density.cc $(BINT) $(main_h) $(neighbours_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
ifneq ($(DPRECISION),-DfalcON_DOUBLE)
$(BIN)g2s:		$(SEXE)g2s.cc $(LIBT) $(main_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
endif
$(BIN)getgravity:	$(SEXE)getgravity.cc $(BINT) $(main_h) $(forces_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)gyrfalcON:	$(SEXE)gyrfalcON.cc $(BINT) $(main_h) $(nbody_h) $(manip_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)manipulate:	$(SEXE)manipulate.cc $(BINT) $(main_h) $(manip_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkbodiesfunc:	$(SEXE)mkbodiesfunc.cc $(BINT) $(main_h) $(bodyfunc_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkbodyfunc:	$(SEXE)mkbodyfunc.cc $(BINT) $(main_h) $(bodyfunc_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkdehnen:		$(SEXE)mkdehnen.cc $(BINT) $(main_h) $(gamma_h) $(LIB)gamma.o $(makefiles)
			$(MAKE_EXE) $(LIB)gamma.o $(NEMO_EXE_FLGS)
$(BIN)mkgalaxy:		doc/mkgalaxy
			cp $< $@
			chmod 755 $@
$(BIN)mkhalo:		$(SEXE)mkhalo.cc $(main_h) $(LIB)halo.o $(makefiles)
			$(MAKE_EXE) $(LIB)halo.o $(NEMO_EXE_FLGS)
$(BIN)mkking:		$(SEXE)mkking.cc $(BINT) $(main_h) $(body_h) $(king_h) $(random_h) $(Pi_h) $(LIB)king.o $(makefiles)
			$(MAKE_EXE) $(LIB)king.o $(NEMO_EXE_FLGS)
$(BIN)mkplum:		$(SEXE)mkplum.cc $(BINT) $(main_h) $(sample_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mksingle:		$(SEXE)mksingle.cc $(BINT) $(main_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)mkWD99disc:	$(SEXE)mkWD99disc.cc $(main_h) $(WD99disc_h) $(LIB)WD99disc.o $(makefiles)
			$(MAKE_EXE) $(LIB)WD99disc.o $(NEMO_EXE_FLGS)
$(BIN)s2a:		$(SEXE)s2a.cc $(BINT) $(main_h) $(body_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
ifneq ($(DPRECISION),-DfalcON_DOUBLE)
$(BIN)s2g:		$(SEXE)s2g.cc $(LIBT) $(main_h) $(body_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
endif
$(BIN)s2s:		$(SEXE)s2s.cc $(BINT) $(main_h) $(body_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)scale_eps:	$(SEXE)scale_eps.cc $(BINT) $(main_h) $(body_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)set_time:		$(SEXE)set_time.cc $(body_h) $(BINT) $(main_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)snapprop:		$(SEXE)snapprop.cc $(BINT) $(main_h) $(bodyfunc_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
$(BIN)snapstac:		$(SEXE)snapstac.cc $(BINT) $(body_h) $(main_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
ifneq ($(COMPILER),icc)
$(BIN)snapsupp:		$(SEXE)snapsupp.cc $(LIBT) $(main_h) $(bodyfunc_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
endif
$(BIN)symmetrize:	$(SEXE)symmetrize.cc $(BINT) $(main_h) $(body_h) $(makefiles)
			$(MAKE_EXE) $(NEMO_EXE_FLGS)
endif
# -----------
# executables
# -----------

TestGrav	:	$(falcON) $(BIN)TestGrav
TestGravC	:	$(falcON) $(BIN)TestGravC
TestGravF	:	$(falcON) $(BIN)TestGravF
TestPair	:	$(falcON) $(BIN)TestPair
TestPairC	:	$(falcON) $(BIN)TestPairC
TestPairF	:	$(falcON) $(BIN)TestPairF

ifdef NEMO

a2s		:	$(falcON) $(BIN)a2s
ifneq ($(COMPILER),icc)
addprop		:	$(falcON) $(BIN)addprop
endif
addgravity	:	$(falcON) $(BIN)addgravity
density		:	$(falcON) $(BIN)density
ifneq ($(DPRECISION),-DfalcON_DOUBLE)
g2s		:	$(falcON) $(BIN)g2s
g2s		:=	g2s
endif
getgravity	:	$(falcON) $(BIN)getgravity
gyrfalcON	:	$(falcON) $(BIN)gyrfalcON
manipulate	:	$(falcON) $(BIN)manipulate
mkbodyfunc	:	$(falcON) $(BIN)mkbodyfunc
mkbodiesfunc	:	$(falcON) $(BIN)mkbodiesfunc
mkdehnen	:	$(falcON) $(BIN)mkdehnen
mkgalaxy	:	$(BIN)mkgalaxy
mkhalo 		:	$(falcON) $(BIN)mkhalo
mkking		:	$(falcON) $(BIN)mkking
mkplum		:	$(falcON) $(BIN)mkplum
mksingle	:	$(falcON) $(BIN)mksingle
mkWD99disc	:	$(falcON) $(BIN)mkWD99disc
s2a		:	$(falcON) $(BIN)s2a
ifneq ($(DPRECISION),-DfalcON_DOUBLE)
s2g		:	$(falcON) $(BIN)s2g
s2g		:=	s2g
endif
s2s		:	$(falcON) $(BIN)s2s
scale_eps	:	$(falcON) $(BIN)scale_eps
set_time	:	$(falcON) $(BIN)set_time
snapprop	:	$(falcON) $(BIN)snapprop
snapstac	:	$(falcON) $(BIN)snapstac
ifneq ($(COMPILER),icc)
snapsupp	:	$(falcON) $(BIN)snapsupp
endif
symmetrize	:	$(falcON) $(BIN)symmetrize

ifeq ($(COMPILER),icc)
exe_pub		:=	TestGrav a2s addgravity density $(g2s) getgravity \
			gyrfalcON manipulate mkbodiesfunc mkbodyfunc mkdehnen \
			mkhalo mkking mkplum mksingle mkWD99disc s2a $(s2g) \
			s2s scale_eps snapprop snapstac symmetrize mkgalaxy
else
exe_pub		:=	TestGrav a2s addgravity addprop density $(g2s) getgravity \
			gyrfalcON manipulate mkbodiesfunc mkbodyfunc mkdehnen \
			mkhalo mkking mkplum mksingle mkWD99disc s2a $(s2g) s2s \
			scale_eps snapprop snapstac snapsupp symmetrize mkgalaxy
endif

else

exe_pub		:=	TestGrav

endif

# ---------------------
# doxygen documentation
# ---------------------

dox/html/index.html:	utils/inc/tupel.h \
			utils/inc/exception.h \
			utils/inc/inline.h \
			utils/inc/io.h \
			utils/inc/traits.h \
			utils/inc/random.h \
			utils/inc/numerics.h \
			utils/inc/Pi.h \
			utils/inc/memory.h \
			utils/inc/WDMath.h \
			inc/public/types.h \
			inc/public/basic.h \
			inc/public/fields.h \
			inc/body.h \
			inc/public/manip.h \
			inc/public/profile.h \
			inc/public/bodyfunc.h \
			inc/public/interact.h \
			inc/public/nbody.h \
			inc/public/PotExp.h \
			src/public/manip/set_subset.cc \
			src/public/manip/use_filter.cc \
			src/public/manip/set_centre.cc \
			src/public/manip/bound_centre.cc \
			src/public/manip/dens_centre.cc \
			src/public/manip/density.cc \
			src/public/manip/densprof.cc \
			src/public/manip/set_centre.cc \
			src/public/manip/sphereprof.cc \
			src/public/manip/projprof.cc \
			src/public/manip/lagrange.cc \
			src/public/manip/add_plummer.cc \
			src/public/manip/symmetrize_pairs.cc \
			src/public/manip/report_bodies.cc \
			src/public/manip/reduce_mass.cc \
			dox/falcON.dox
			doxygen dox/falcON.dox

#doxu		:	dox/html/index.html
doxu		:
	@echo Not creating doxygen anymore

view_dox	:	doxu
			firefox dox/html/index.html
