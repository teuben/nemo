# -*- makefile -*-
#
# sets library sub-directory and flags for gcc compiler
# to be included by makefile 
#
include ../utils/make.sh

ifndef GCC
GCC		:= gcc
GPP		:= g++
endif


EXT             := .gcc
CXX             := $(GPP)
CC              := $(GCC)
FC              := $(FC)

PLATFORM 	:= $(shell uname -m)
#
# Detect GCC version
#
empty:=
space:= $(empty) $(empty)
GCCVERSIONSTRING := $(shell expr `$(CC) -dumpversion`)
#Create version number without "."
GCCVERSION := $(shell expr `echo $(GCCVERSIONSTRING)` | cut -f1 -d.)
GCCVERSION += $(shell expr `echo $(GCCVERSIONSTRING)` | cut -f2 -d.)
GCCVERSION += $(shell expr `echo $(GCCVERSIONSTRING)` | cut -f3 -d.)
# Make sure the version number has at least 3 decimals
GCCVERSION += 00
# Remove spaces from the version number
GCCVERSION := $(subst $(space),$(empty),$(GCCVERSION))
# Crop the version number to 3 decimals.
GCCVERSION := $(shell expr `echo $(GCCVERSION)` | cut -b1-4)
#$(warning $(GCCVERSION))
gccversion:
	@echo "GCC version = " $(GCCVERSION)
# detect OSTYPE (Linux or Darwin) 
OSTYPE := $(shell uname)
ostype:
	@echo "OSTYPE = " $(OSTYPE)
# set following variable to 1 if gcc > 700
API_GCC_7 := $(shell expr `echo $(GCCVERSION)` \>= 700)

# c++98 c++03 c++11 c++14 c++17 c++20
ifeq "$(API_GCC_7)" "1"
    STDAPI=#-std=c++14#-std=c++03
else
    STDAPI=
endif

# warning flags
ifdef LIMITED_WARNINGS
WARNING		:= $(LIMITED_WARNINGS) -Wshadow -Wno-format-security -Wno-misleading-indentation -Wno-cast-function-type -Wno-format-overflow -Wno-c++11-compat-deprecated-writable-strings -Wno-redeclared-class-member -Wno-deprecated
else
WARNING		:= -Wextra -Winit-self -Wshadow -Wno-format-security -Wno-misleading-indentation -Wno-cast-function-type -Wno-format-overflow -Wno-c++11-compat-deprecated-writable-strings -Wno-redeclared-class-member -Wno-deprecated
endif
ifndef TBBROOT
ifdef WDutilsDevel
WARNING		+= -Wold-style-cast
endif
endif
#WARNING		+= -Wno-unknown-pragmas
WARNING		:= -Wextra -Winit-self -Wshadow -Wno-format-security -Wno-misleading-indentation -Wno-deprecated -Wno-expansion-to-defined -Wno-write-strings

# it seem that coverage (to be combined with gcov) does not work for openmp)
#ifdef WDutilsDevel
#PROFLAGS	:= --coverage -fprofile-use -Wcoverage-mismatch
#endif
# general optimisation and warning flags
# OPTFLAGS	:= -mfpmath=sse -mpreferred-stack-boundary=4 
#OPTFLAGS	:= -mfpmath=sse 
#OPTFLAGS	:= \
		--param inline-unit-growth=50
OPTFLAGS	:= -ggdb3 $(WARNING) -O2 -fPIC \
		-funroll-loops -fforce-addr $(PROFLAGS) $(RDYNAMIC)

ifeq ($(NO_ARCH_NATIVE),1)
   ARCH_NATIVE =
else
   ARCH_NATIVE = -march=native
endif

ifneq ($(OSTYPE),Darwin)
OPTFLAGS	+= -rdynamic $(ARCH_NATIVE)
endif

# these are actually to be set
CFLAGS		:= $(OPTFLAGS)

WARNING		+= -Woverloaded-virtual
OPTFLAGS	+= -Woverloaded-virtual

ifdef CXX11
CXXFLAGS	:= -std=c++11 $(OPTFLAGS)
else
CXXFLAGS	:= $(STDAPI) $(OPTFLAGS)
endif

ifdef OPENMP
CXXFLAGS	+= -fopenmp
CFLAGS		+= -fopenmp
LDFLAGS		:= -shared -fopenmp $(PROFLAGS)
else
LDFLAGS		:= -shared $(PROFLAGS)
endif

# end

