#! /bin/csh -f
#
# to get a rotating disk:    ./mk_cone vscale=1 outflow=0 cone=90 out=disk1
# or via tkrun:              tkrun ./mk_cone
#
# the disk= blends in a true disk so you can see both the outflow cones and the disk
# Make sure "ds9" has been launched before this script is run, as many frames are sent to ds9
# is the 'ds9' is selected in mode=. Alternatively, pick mode=plot
# When in ds9 mode, the PV slices need to be set once: first can remains at 123, then 132, and 231
#
# History:
#     nov-2018      written at ESO - Peter Teuben
#     jul-2020      expanded with a disk and indep. geometry for Alberto to play with
#     jun-2021      fix missing sign=; add noise
#     mar-2022      add jdz= and debug=

#--HELP

#   nbody:   how many particles to represent the object(s)

#   rmin:    the cone starts at rmin in the Z=0 plane
#   vscale   setting this > 0 will give the outflow some rotation as well
#   outflow  outflow velocity
#   flow     flat,rise or fall
#   cone     half opening angle
#   inc      inc of cone w.r.t. disk (disk is always along X axis)
#   pa       pa of cone w.r.t. disk
#   view     0 = optically thin   1=only see front   (-1 only see back)
#   jzd      angular momentum of disk (1=counter clock wise) (1 or -1)
#   incd     inc of disk
#   mirror   1=have both sides
#   fill     t=cone is filled  f=cone is hollow
#   disk     this is the mass ratio of the disk to a half cone   (@todo  allow 0..1 )
#   svar     smoothing size (sigma, not FWHM)
#   noise    add some noise?
#   out      base name of output files
#   mode     ds9 and/or (pdf) plot
#   debug    -1 makes it quiet, 0 starts adding NEMO noise
#
#--HELP

if ( "$1" == "--help" || "$1" == "-h" ) then
    awk 'BEGIN{s=0} {if ($1=="#--HELP") s=1-s;  else if(s) print $0; }' $0
    exit 0
endif

set nbody   = 10000     #> SCALE nbody=10000  1000:1000000:1000
set rmin    = 0.3       #> SCALE rmin=0.3     0:1:0.1
set rmax    = 1         #> SCALE rmax=1       0:2:0.1
set vscale  = 0.9       #> SCALE vscale=0.9   -2:2:0.1
set outflow = 0.4       #> SCALE outflow=0.4  0:2:0.1
set flow    = flat      #> RADIO flow=flat    flat,rise,fall
set cone    = 30        #> SCALE cone=30      0:90:1
set inc     = 0         #> SCALE inc=0        0:90:1
set pa      = 0         #> SCALE pa=0         0:360:1
set view    = 0         #> RADIO view=0       -1,0,1
set jzd     = 1         #> RADIO jzd=1        -1,1
set incd    = 80        #> SCALE incd=80      0:90:1
set mirror  = 1         #> RADIO mirror=1     0,1
set fill    = f         #> RADIO fill=f       t,f
set disk    = 1         #> RADIO disk=1       0,1/1000,1/100,1/10,1,10,100,1000,10000,inf
set svar    = 0.01      #> SCALE svar=0.01    0:1:0.01
set noise   = 0.0       #> SCALE noise=0.0    0:1:0.001
set out     = cone1     #> ENTRY out=cone1
set mode    = ds9       #> CHECK mode=ds9     ds9,plot
set debug   = -1        #> SCALE debug=-1     -1:9

#  parameters not in the GUI
set rmaxd = 2
set rc    = 0.1
set n     = 128
set scale = -1/60,1/60,100     # model units are arcmin, 100 km/s

foreach _arg ($*)
    set $_arg
end

# in Bae_2016_ApJ_828_97.pdf there is nice diagram (Figure 1+2) explaining their parameters.
# the main difference is that we only use "incd" for the disk, we don't rotate the disk
# so "pad=90" fixed really.
# The pa/inc of the cone is defined w.r.t. the disk, which can then be inclined after.
# Here are the variables from the paper:
#   i_bicone   (for the cone)
#   PA_bicone
#   i_dust     (for the disk)
#   PA_dust
#   theta_in   (half cone opening angle)
# they use 3 different velocity profiles:
#   - linear (which we have here)
#   - linear decrease (inverse of previous)
#   - constant

# See also  https://arxiv.org/abs/2109.10437 (ALMA Imaging of a Galactic Molecular Outflow in NGC4945)
# Bolatto et al. 2021
# See https://arxiv.org/abs/2307.01854
# See also Westmoquette et al. (2011) - MNRAS 414, 3719


rm -f $out.*

set do_ds9=`echo $mode | grep -c ds9`
set do_plt=`echo $mode | grep -c plot`
setenv DEBUG $debug

# special case:
if ($disk == "inf") then
  set disk=1
  set mirror=-1
endif  

# the disk rotates counterclock wise, kinematic major axis -X, and the near side is along the +Y axis.
mkdisk $out.0 $nbody mass=$disk potname=log potpars="0,0.5*$rc,$rc" rmax=$rmaxd sign=$jzd >& /dev/null

if ($flow == flat) then
    echo 0 $outflow   > $out.flow
    echo 1 $outflow  >> $out.flow
else if ($flow == rise) then
    echo 0 0          > $out.flow
    echo 1 $outflow  >> $out.flow
else if ($flow == fall) then
    echo 0 $outflow   > $out.flow
    echo 1 0         >> $out.flow
else
    echo No valid $floa
    exit 0
endif    

if ($mirror == 0) then
  # only one cone
  mkdisk - $nbody mass=1 rmin=$rmin rmax=$rmax potname=log potpars="0,0.5*$rc,$rc" sign=$jzd |\
    snapscale - - vscale=$vscale |\
    snapspin - - rotcur=$out.flow outflow=t sign=-1 |\
    snapfold - - theta=90-$cone fill=$fill view=$view |\
    snaprotate - $out.1 $inc,$pa xz

    cat $out.0 $out.1 |\
    snapmerge - - |\
    snaprotate - - $incd x > $out.snap
else if ($mirror == 1) then
  # one cone on each side
  mkdisk - $nbody mass=1 rmin=$rmin rmax=$rmax potname=log potpars="0,0.5*$rc,$rc" sign=$jzd |\
    snapscale - - vscale=$vscale |\
    snapspin - - rotcur=$out.flow outflow=t sign=-1 |\
    snapfold - - theta=90-$cone fill=$fill view=$view |\
    snapshift - - 0,0,-$rmin |\
    snaprotate - $out.1 $inc,$pa xz    
  mkdisk - $nbody mass=1 rmin=$rmin rmax=$rmax potname=log potpars="0,0.5*$rc,$rc" sign=$jzd |\
    snapscale - - vscale=$vscale |\
    snapspin - - rotcur=$out.flow outflow=t sign=1 |\
    snapfold - - theta=90-$cone fill=$fill view=$view |\
    snapshift - - 0,0,-$rmin |\
    snapscale - - rscale=1,1,-1 |\
    snaprotate - $out.2 $inc,$pa xz    

  cat $out.0 $out.1 $out.2 |\
    snapmerge - - |\
    snaprotate - - $incd x > $out.snap
else
  echo Skipping making a cone
  snaprotate $out.0 $out.snap $incd x
endif

# @todo
#   snapgrid:    doesn't do beam if svar used
#                cdelt1 is positive

#   svar: add a bit of smoothing.   In these defaults pixelsize=4/128 = 0.03
snapgrid $out.snap $out.vel moment=-1 nx=$n ny=$n svar=$svar >& /dev/null
snapgrid $out.snap $out.den moment=0  nx=$n ny=$n svar=$svar >& /dev/null
snapgrid $out.snap $out.sig moment=-2 nx=$n ny=$n svar=$svar >& /dev/null
ccdfits $out.den $out.den.fits scale=$scale radecvel=t >& /dev/null
ccdfits $out.vel $out.vel.fits scale=$scale radecvel=t >& /dev/null
ccdfits $out.sig $out.sig.fits scale=$scale radecvel=t >& /dev/null

snapgrid $out.snap - nx=$n ny=$n nz=$n/2 zrange=-2:2 |\
   ccdmath - - "%1+rang(0,$noise)" |\
   ccdsmooth - - gauss=$svar |\
   ccdfits - $out.fits scale=$scale radecvel=t debug=-1

#   example of a R-V diagram along the major and minor axis.
#   the far side is at pa=180, the kin. major at 90.

fitsccd $out.fits - |\
   rvstack - - pa=90     inc=$incd vsys=0 center=$n/2,$n/2 rscale=3600 mode=r |\
   ccdfits -  $out.rvma.fits

fitsccd $out.fits - |\
   rvstack - - pa=90+90  inc=$incd vsys=0 center=$n/2,$n/2 rscale=3600 mode=o |\
   ccdfits  - $out.rvmi.fits  
   

if ($do_ds9) then   
    xpaset -p ds9 frame frameno 1
    nds9 $out.den.fits
    xpaset -p ds9 frame frameno 2
    nds9 $out.vel.fits
    xpaset -p ds9 frame frameno 3
    nds9 $out.sig.fits

#  load the same cube 3 times, so locally you will need to Cube -> Axis Order -> 1,2,3  1,3,2 and 2,3,1
#  to get the different types of PV slices
    xpaset -p ds9 frame frameno 4
    nds9 $out.fits
    xpaset -p ds9 frame frameno 5
    nds9 $out.fits
    xpaset -p ds9 frame frameno 6
    nds9 $out.fits
    
    xpaset -p ds9 frame frameno 7
    nds9 $out.rvma.fits
    xpaset -p ds9 frame frameno 8
    nds9 $out.rvmi.fits
endif

if ($do_plt) then
  ./plot_gal3d.py $out
endif

echo MODE=$mode $do_ds9 $do_plt
