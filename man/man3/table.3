.TH TABLE 3NEMO "10 April 2022"

.SH "NAME"
table_open, table_md2, table_close - table manipulation routines
.PP
get_atable, get_ftable, get_line, parse, strinsert \- legacy table routines

.SH "SYNOPSIS"
\fINOTE:\fP table V2 is under final development.   The API with a - in front have not been implemented. Names of
functions with 0, 1 or 2 at the end are varients that should (will) be unified. During this
development \fBtable.h\fP has the final word.

.nf
.B #include <table.h>
.B #include <mdarray.h>
.B #include <extstring.h>
.PP
.B table  *table_open(stream instr, int mode);
.B table  *table_open0(stream instr, int mode);
.B table  *table_open1(stream instr, int mode, int nlines);
.B void    table_close(tableptr tptr);
.B size_t  table_nrows(tableptr tprt);
.B size_t  table_ncols(tableptr tprt);
.B string  table_row(tableptr tptr, int row);
.PP

.B string table_line0(table *t) 
.B ssize_t table_line1(table *t, char **line, size_t *linelen);
.PP
.B - mdarray2 table_md2(table *t);
.B - void table_read(table *t);
.B - string *table_comments(table *t);
.B void table_reset(table *t);
.B void table_close(table *t);
.PP
.B - void table_set_valid_rows(int nrows, int *rows)
.B - void table_set_valid_cols(int ncols, int *cols)
.PP
.B - int table_next_row(table *t)   
.B - int table_next_rows(table *t)  
.B - int table_next_rowi(table *t)
.B - int table_next_rowr(table *t)
.PP
.B - string table_cols(table *t, int col)
.B - int  table_coli(table *t, int col)
.B - real table_colr(table *t, int col)
.PP
.B - string *table_colsp(table *t, int col) 
.B - int *table_colip(table *t, int col)
.B - real *table_colrp(table *t, int col)
.PP
.B - string table_row(table *t, int row)
.B - string *table_rowsp(table *t, int row)
.B - int *table_rowip(table *t, int row)
.B - real *table_rowrp(table *t, int row)
.PP
.B - void table_set_ncols(int ncols)
.PP
.B - table *table_cat(int ntable, table *tptr, int mode)
.PP
.I Old: (deprecated or emulated)
.PP
.B int get_atable(strean instr,int ncol,int *colnr,real *coldat,int ndat)
.PP
.B int get_ftable(stream instr,int ncol,int *colpos,string *colfmt,real *coldat,int ndat) // check
.PP
.B int get_line (string instr, char *line)
.PP
.B int parse(int linenr, char *line, double *dat, int ndat)
.PP
.B int strinsert(char *a, char *b, int n)
.PP
.B int iscomment(char *line)
.fi

.SH "USING TABLES"

Tables can be arbitrarely large, but like top level of NEMO structured files,
do need to fit in memory. There can be some exceptions to this,
and certain applications will stream data that do not fit in
memory.

.PP
The particular table dialect should be detected automatically in
files, and number of columns and rows can be arbitrarely high.
\fItabgen(1NEMO)\fP
has methods to make really large tables in both "column" and "row" space
for testing purposes.

.PP
When a table comes from a pipe, obviously it cannot seek, however
using the new table I/O the full table is read into memory, initially
using a linked list, and can then be addressed line by line in random
row fashion.

.PP
An exception could be made where the table can be read in blocks of say 100
lines or so?

.PP
Comment lines: there are too many conventions for this, but we need to cover
them all.   A line starting with
.nf

.B #
.B !
.B ;
.B /
.B \e
.B |
.B C

.fi
have all been used for comments.  In addition comments have been used
at the end of a line, e.g.
.nf

.B     1 2 3   # this is a comment

.fi
but see \fItable(5NEMO)\fP for the official rules.
     

.SH "DESCRIPTION"
This new \fItable\fP interface was introduced in Summer 2020 to create a more uniform and scaleable
table ASCII system. This will have no limit on number of columns, line length or number or rows,
perhaps at a slight cost of performance. It should also detect automatically if tables have
Space Separated Values (SSV), Comma Separated Values (CSV) or Tab Separated Values (TSV).
.PP
.B table_open
opens a file for reading. The returned \fItable*\fP pointer is used in all subsequent table_ routines.
The
.B mode
controls how many lines from the table are allowed in internal buffers. A value of \fB0\fP
means the whole table will be read in memory, a value of \fB1\fP will read the table line
by line, controlled by the user (see \fBtable_line\fP below).
Values larger than 1 are planned, but not yet supported.
.PP
.B nlines?
used to be in the old system a lot, but we can probably live without it. It normally is only
needed when the input file is a pipe and the whole file needs to be read, which is now supported.
.PP
.B table_line0
will read the next line from the table stream.  If the file had been opened in \fBmode=0\fP all
lines have been read,  and \fBtable_line0\fP would return NULL.

.PP
.B table_md2
is a shortcut to convert an ascii table immediately into a two dimensional \fImdarray(3NEMO)\fP.
With
.B table_read
the whole table is read into memory (not implemented, use the table_line routines).
Any comment lines at the start of the file will saved in a special
\fIcomment\fP set of lines, which can be extracted with
.B table_comments.
Finally
.B table_close
access to the table can be closed and any associated memory will be freed. In addition
.B table_reset
can be used to reset array access (more on that later), in the case it needs to be re-read.
For arrays that are processed in streaming mode (e.g. \fIfilename="-"\fP) this will result in an error.
.PP
Once a table has been fully read into memory,
.B table_nrows
returns the number of (data, i.e. non-comment) rows (assuming non-streaming), and 
.B table_ncols
the number of columns. By using
.B table_set_valid_rows
and/or
.B table_set_valid_cols
rows and/or columns can be selected for conversion, and this will also define the new value for
.I nrows
and
.I ncols.
When
.B table_reset
is called, these values are reset to their original value.
.PP
If the table is parsed line by line, some routines will not be accessible, since the table is not
in memory. 
.PP
Using
.B table_next_row
a new line can be read. This will return -1 upon end of file, 0 when the line is blank or contains
no data, though could contain comments (e.g. lines with # ! or ;), and 1 when a line
was read. No parsing will be done. If parsing is done, the line will be tokenized
in identical types (\fBs\fPtring, \fBi\fPnt or \fBr\fPeal), with resp.
.B table_next_rows
,
.B table_next_rowi,
or
.B table_next_rowr.
The last line is always stored internally, and a pointer to the string can be retrieved with
.B table_line
for more refined user parsing.
.PP
Depending on with which of the three types the line was parsed, column elements can be retrieved with
.B table_cols,
.B table_coli,
or
.B table_colr.
and if the whole table was available in memory, columns can also be retrieved in full via
.B table_colsp,
.B table_colip,
or
.B table_colrp
.PP
The currently parsed row can in full be retrieved with (again, depending on type)
.B table_rowsp,
.B table_rowip,
or
.B table_rowrp
where the row number is ignored if the table is parsed row by row.
.PP
Possible future routines are
.B table_set_ncols
to cover the case where a row can span multiple lines. By default each line is a row in the table.
.PP
Given a number of tables, the
.B table_cat
function will catenate them. mode=0 will catenate them \fIvertically\fP, i.e. append the rows, keeping the
same number of columns, whereas mode=1 will catenate them \fIhorizontally\fP, keeping the number of
rows, but increasing the number of columns.   It is currently considered an error if the tables are
not conformant in size.

.PP
The original \fIlegacy table routines\fP remain available, though they should implement the new API.
.PP
Both \fIget_atable\fP
and \fIget_ftable\fP parse an ascii table, pointed by the \fIinstr\fP stream,
into \fIncol\fP columns and up to \fIndat\fP rows of \fBreal\fP numbers
into memory. The input table may contain comment lines, as well as columns
which are not numbers. Badly parsed lines are simply skipped.
Other common parameters to both routines 
are \fIcoldat, ncol\fP and \fIndat\fP:
\fIcoldat\fP is an array of \fIncol\fP pointers to 
previously allocated data, each of them \fIndat\fP \fBreal\fP elements.
The number of valid rows read is then returned. If this number is negative,
it means more data is available, but could not be read because 
\fIndat\fP was exhausted. Upon the next call \fIndat\fP must be set to
negative, to recover the last line read on the previous call, and continue
reading the table without missing a line. CAVEAT: this only works if
\fIinstr\fP has not changed. 
.PP
\fIget_atable\fP parses the table in free format.
\fIcolnr\fP an array of length \fIncol\fP
of the column numbers to read (1 being the first column),
If any of the \fIcolnr\fP is 0, it is 
interpreted as referring to the line number in the
original input file (including/excluding comment and empty lines), 
1 being the first line, and the
corresponding entry in \fIcoldat\fP is set as such.
Columns are separated by whitespace or commas.
.PP
\fIget_ftable\fP parses the table in fixed format.
\fIcolpos\fP is an array with 
positions in the rows to start reading (1 being the first position),
\fIcolfmt\fP an array of pointers to the format string
used to parse a \fBreal\fP number
(note \fBreal\fP normally requires \fI%lf\fP).
If any of the \fIcolpos\fP is 0, it is interpreted as referring to the line 
number in the
original input file (including comment lines), 1 being the first line, and the
corresponding entry in \fIcoldat\fP is set as such.
.PP
The \fIget_line(3)\fP gets the next line from a stream \fIinstr\fP, stored
into \fIline\fP. It returns the length of the string read, 0 if end of file.
This routine is deprecated, the standard \fIgetline(3)\fP should be used.
.PP
\fIparse\fP parses the character string in \fIline\fP into the double array
\fPdat\fP, which has at most \fIndat\fP entries. Parsing means that 
\fB%n\fP refers to column \fBn\fP in the character string (\fBn\fP must
be larger than 0. Also \fB%0\fP may be referenced, meaning the current
line number, to be entered in the argument \fIlinenr\fP.
.PP
\fIstrinsert\fP inserts the string \fIb\fP into \fIa\fP, replacing \fIn\fP
characters of \fIa\fP.
.PP
\fIiscomment\fP returns 1 if the line appears to be a comment
(starts with ';', '#', '!' or a blank/newline)

.SH "EXAMPLES"
Some examples drafted, based on the new API presented.
.PP
An example reading in a full table into a two dimensional mdarray2, and
adding 1 to each element:
.nf

    table *t = table_open(filename, 0, 0);
    ncols = table_ncols(t);
    nrows = table_nrows(t);
    mdarray2 d2 = table_md2(t);
    table_close(t);
    
    for (int i=0; i<nrows; i++) 
    for (int j=0; j<ncols; j++)
        d2[i][j] += 1.0;          // d2[row][col]

.fi
and here is an example of reading the table line by line, without any parsing,
but removing comment lines. This can be done in line by line streaming mode,
not allocating space for the whole table, for which \fBmode=1\fP is needed:
.nf

    table *t = table_open0(filename, 1);
    int nrows = 0;
    string s;
    
    while ( (s=table_line(t)) ) {
	if (iscomment(s)) continue;
        nrows++	
        printf("%s\\n", s);           // fputs() might be faster
    }
    
    table_close(t);
    dprintf(0,"Read %d lines\\n",nrows);
    
.fi
and dealing (and preserving) comments while reading in the whole table:
.nf

    table *t = table_open1(filename, 0, 0);
    int nrows = table_nrows(t);
    int ncols = table_ncols(t);  // this triggers a column counter
    
    string *sp = table_comments(t);
    while (*sp)
      printf("%s\n",*sp++);

    for (int j=0; j<nrows; j++)
	real *rp = table_rowrp(t, j);
	for (int i=0; i<ncols; i++)
	    printf("%g ",rp[i]);
	printf("\n");

    table_close(t);

.fi

.SH "XSV"
.nf
cat AAPL.csv | xsv table | head -2
cat AAPL.csv | xsv slice -i 1 | xsv table
cat AAPL.csv | xsv slice -i 1 | xsv flatten
cat AAPL.csv | xsv count


.fi

.SH "DIAGNOSTICS"
Low-level catastrophies (eg, bad filenames, parsing errors, wrong delimiters)
generate messages via \fIerror(3NEMO)\fP.

.SH "SEE ALSO"
mdarray(3NEMO), nemoinp(3NEMO), burststring(3NEMO), fits(5NEMO), table(5NEMO)
.PP
.nf
https://github.com/BurntSushi/xsv
https://heasarc.gsfc.nasa.gov/docs/software/fitsio/c/c_user/cfitsio.html
https://www.gnu.org/software/gnuastro/manual/html_node/Tables.html
.fi

.SH "FILES"
.nf
.ta +2.0i
src/kernel/tab  	table.c 
.fi

.SH "AUTHOR"
Peter Teuben

.SH "UPDATE HISTORY"
.nf
.ta +1.5i +5.5i
xx-sep-88	V1.0 written	PJT
6-aug-92	documented get_Xtable functions  	PJT
1-sep-95	added iscomment()	PJT
12-jul-03	fixed reading large table buffereing	PJT
aug-2020	designing new table system	Sathvik/PJT
mar-2022	finalizing implementation of table2	PJT/xxx/yyy
.fi


.ig
-------   here's the progress list of programs that have been converted
tabcomment

..
