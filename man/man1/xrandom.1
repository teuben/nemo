.TH XRANDOM 1NEMO "1 July 2025"

.SH "NAME"
xrandom \- Return seed for random numbers and optionally random numbers

.SH "SYNOPSIS"
\fBxrandom\fP [parameter=value]

.SH "DESCRIPTION"
\fBxrandom\fP returns a seed that can be used to random number generators,
and optionally random numbers drawn from a uniform or gaussian (normal)
distribution. Uniform numbers are between 0 and 1, gaussian numbers 
have a mean of 0 and a dispersion of 1. 
.PP
If compiled with GSL, random number generator types 
can be selected, as well as many more distribution types.

.SH "PARAMETERS"
.so man1/parameters
.TP 20
\fBseed=\fP
Initial seed. Values 0 and below are special:

0 for the current time (seconds since 1970.00, see also \fItime(2)\fP) and $EPOCHSECONDS

-1 for the number of centiseconds since boot (see \fItimes(2)\fP) 

-2 for the current pid (see \fIgetpid(2)\fP).

-3 wishful thinking the linux kernel will give an even more random seed

If GSL is implemented
the seed value can be optionally followed by the random number 
generator type (default: mt19937). See \fIxrandom(3)\fP for more
details.
.TP 
\fBn=\fP
Number of random numbers to draw
.br
[Default: 0].
.TP
\fBm=\fP
Number of times to repeat the experiment. If more than 1, tabulating
is turned off, and reporting is now doine at the end of all tests,
and the statistics of the mean's from each \fBn\fP sample is shown.
.br
[Default: 1].
.TP
\fBgauss=\fP
Return gaussian numbers instead of uniform?
.br
[Default: f]
.TP
.TP
\fBexp=\fP
Return exponential random numbers instead. Setting this will override the \fBgauss=\fP parameter.
.br
[Default: f]
.TP
\fBreport=\fP
Report mean/dispersion/skewness/kurtosis? 
.br
[Default: f]
.TP
\fBtab=t|f\fP
Tabulate all random numbers
.br
[t]
.TP
\fBoffset=\fP
Offset of distribution from 0.
.br
Default: 0.0
.TP
\fBgsl=\fP
Name of the random number distribution requested. They follow the name convention
of the same-name functions \fIgsl_random_xxx\fP in the \fIgsl(3)\fP library.
Only available if compiled with GSL.
.br
No default.
.TP
\fBpars=\fP
Parameters belonging to the selected \fBgsl\fP name. They need to match
exactly (0, 1, 2 or 3 currently).
.br
No default.
.TP
\fBseed57=\fP
This quaint option will activate von Hoerner's 1957 algorithm of drawing random numbers.
It needs a seed between 0.57 and 0.91. See also \fImkvh60(1NEMO)\fP.
.br
Default: not used.

.SH "EXAMPLES"
Here is an example script, \fBgrandom.csh\fP, 
to test if the error in the mean scales
as 1/sqrt(N):
.nf

#! /bin/csh -f
#
#       n1: sample size 
#       n2: number of times to do the experiment

set n1=100
set n2=100
foreach i (`nemoinp 1:$n2`)
  set log=(`xrandom -1 100 t | tail +2 | tabhist - tab=t |& grep ^Mean`)
  echo $log[5]
end

.fi
This script outputs \fBn2\fP numbers, of which the mean should be 0 and the
dispersion (now the error in the mean) 1/sqrt(n2), where 0 and 1 are the
mean and dispersion of a random gaussian number from \fIgrandom(3NEMO)\fP:
.nf

       % grandom.csh | tabhist -
100 values read
min and max value in column 1: [-0.335527 : 0.348629]
Number of points     : 100
Mean and dispersion  : 0.0120416 0.102367
Skewness and kurtosis: -0.0528344 1.19066
Median               : 0.000425562

.fi
.PP
xrandom can also be use to estimate the wall clock time of a complex pipe. Here
is an example using the \fIcentiseconds since boot\fP timer from the \fBseed=-1\fP
mode:
.nf

  t0=$(xrandom -1);mkplummer - 1000000 | snapsort - - r | hackdens - .; t1=$(xrandom -1); nemoinp "($t1-$t0)/100"
  6.09
  
.fi
where 6.09sec was measured on the fastest machine I had available at the time of this writing
(Jansky, with nemobench5 ~ 1350). Turns out for this example about 90% of the CPU time is spent in \fPhackdens(1NEMO)\fP.

.SH "GSL"
If the GNU Scientific Library (GSL) has been enabled during installation, the
\fBgsl=\fP and \fBpars\fP keyword will appear in the keyword list of xrandom.
The following random number distribution names are implemented, 
and the names of their parameters. Note that
the number of parameters, as given in \fBpars=\fP has to match exactly,  there are no
defaults.
.nf
gaussian               sigma
gaussian_ratio_method  sigma
gaussian_tail          a sigma
exponential            mu
laplace                a
exppow                 a b
cauchy                 a
rayleigh               sigma
rayleigh_tail          a sigma
landau                 N/A   
levy                   c alpha
levy_skey              c alpha beta
gamma                  a b
flat                   a b
lognormal              zeta sigma
chisq                  nu
fdist                  nu1 nu2
tdist                  nu
beta                   a b
logistic               a
pareto                 a b
weibull                a b
gumbel1                a b
gumbel2                a b
.fi
The following functions are discrete random number distributions, and return integers:
.nf
poisson                mu
bernoulli              p
binomial               p n
negative_binomial      p n
pascal                 p k
geometric              p
hypergeometric         n1 n2 nt
logarithmic            sigma
.fi

.SH "RANDOM"
Random numbers can be seeded using the \fIseed=\fP keyword.
There are also Unix ways to do this. Here are a few (using bash notation):

.nf

echo $RANDOM
echo $$
shuf -i 1-100 -n 5
awk -v n=5 -v seed="$RANDOM" 'BEGIN {srand(seed); for(i=0; i<n; ++i) printf("%.3f\\n",rand())}'
tr -cd "[:digit:]" < /dev/urandom | head -c 6
echo $EPOCHSECONDS

.fi
Note that /dev/urandom is only available on Linux

.SH "AUTHOR"
Peter Teuben

.SH "HISTORY"
.nf
.ta +1.5i +5.5i
26-Nov-96	V1.0 turned TESTBED into a TOOLBOX program	PJT
13-apr-97	example
8-sep-01	V2.0 GSL optionally added	PJT
9-oct-2012	V2.2 added m=	PJT
21-aug-2022	V2.4 added exp=	PJT
27-sep-2023	V2.5 less verbose and wall clock timing example added	PJT
.fi
